# Exercise 4.35

This adds a 'ref' form to IMPLICIT-REFS.

Expression ::= ref Identifier
               [ref-exp (var)]

The value of a ref expression is a reference to the location denoted
by the given variable.  Since this provides a way to get references as
values in this language, the expressed values change:

Exp-val = Int + Bool + Proc + Ref(Exp-val)

The example for this exercise shows additional infrastructure for
working with reference values, namely deref and setref expressions.
The semantics for these are basically the same as they were in the
earlier language.

Here's the rule for ref:

-----------------------------------------
 (value-of (ref-exp (var)) ρ σ) = ρ(var)


Further discussion: The deref form is convenient but inessential, since
it's always possible to pass a variable's reference *and* value, e.g.

let a = 5
in let f = proc (r) proc (v)
             setref(r, -(v, 1))
   in ((f (ref a)) a)

Of course, this is pretty clumsy.

A much more interesting question is whether the language needs both
'set' and 'setref'.  The difference is subtle: set assigns to a
location denoted by a variable, whereas setref assigns to a location
which is computed by evaluating an expression.  It's worth thinking
about how whether these two could be unified, and what the
consequences would be.
