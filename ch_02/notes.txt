# 2: Data Abstraction

## 2.1

Notation: ⌈v⌉ will denote “the representation of data v”.

An example: the natural numbers.  The interface here consists of
four procedures satisfying the following equations:

(zero) = ⌈0⌉
                 ⎧ #t   n = 0
(is-zero? ⌈n⌉) = ⎨
                 ⎩ #f   n ≠ 0

(successor ⌈n⌉) = ⌈n + 1⌉   (n ≥ 0)

(predecessor ⌈n + 1⌉) = ⌈n⌉   (n ≥ 0)

Why the ≥ 0 condition on successor (but not on is-zero?)?

This is very reminscent of a denotational semantics for the
language consisting of these procedures!

Using this interface:

(define plus
  (lambda (x y)
    (if (is-zero? x)
        y
        (successor (plus (predecessor x) y)))))

This satisfies the equation (plus ⌈x⌉ ⌈y⌉) = ⌈x + y⌉.

A unary representation:

⌈0⌉ = ()
⌈n + 1⌉ = (#t . ⌈n⌉)

Then the procedures are defined by

(define (zero) '())
(define (is-zero? n) (null? n))
(define (successor n) (cons #t n))
(define (predecessor n) (cdr n))

Note that the definition of successor doesn’t exactly satisfy its
semantics, since it does not check that ⌈n⌉ ≥ holds.

If a type’s representation cannot be exposed, it is called an opaque
type; otherwise, it’s called transparent.

### 2.2.1 The environment interface

An environment is a function from a finite set of variables to Scheme
values.  The interface:

(empty-env) = ⌈∅⌉

(apply-env ⌈f⌉ var) = f(var)

(extend-env var v ⌈f⌉) = ⌈g⌉
                  ⎧ v       if var₁ = var
  where g(var₁) = ⎨
                  ⎩ f(var₁) otherwise

Since every environment can be built up by successive extend-env
operations, a grammar for environment expressions is pretty easy:

Env-exp ::= (empty-env)
        ::= (extend-env Identifier Scheme-value Env-exp)

> The interpreter recipe:
>
> 1. Look at a piece of data.
>
> 2. Decide what kind of data it represents.
>
> 3. Extract the components of the datum and do the right thing with
>    them.

The first representation is a rather direct implementation of the
above interface using tagged lists. (p. 38)

### Procedural representation

Since environments are functions, they can be intuitively implemented
as procedures. (p. 40)

“Proceduralization” of a data type with a single observer:

> 1. Identify the lambda expressions in the client code whose
> evaluation yields values of the type.  Create a constructor
> procedure for each such lambda expression.  The parameters
> of the constructor procedure will be the free variables of
> the lambda expression.  Replace each such lambda expression
> in the client code by an invocation of the corresponding
> constructor.
>
> 2. Define an ‘apply-’ procedure ….  Identify all the places
> in the client code, including the bodies of the constructor
> procedures, where a value of the type is applied [eliminated?].
> Replace each such application by an invocation of the ‘apply-’
> procedure.

(p. 41)  This takes some thinking.  I know Dan Friedman likes
these “recipes”, but it would be nice to have a formal model
of what this process means.

If the implementation language doesn’t have first-class
procedures, one could do the above, then *defunctionalize*.
This is much like the representation of environments (which are
functions in their specification) by data structures.

“The relation between procedural and defunctionalized representations
will be a recurring theme in this book.”

## 2.3 Interfaces for recursive data types

> Designing an interface for a recursive data type
>
> 1. Include one constructor for each kind of data in the data type.
>
> 2. Include one predicate for each kind of data in the data type.
>
> 3. Include one extractor for each piece of data passed to a
>    constructor of the data type.

(3) is an interesting way to think about the model: If we pass data
in, we probably want a way to get it out.

## 2.5 Abstract syntax and its representation

The grammars so far have been *concrete*, i.e. they give an external
representation (as strings) of a data type.  But other string reps.
could be used, e.g. the alternate Lc-exp grammar:

Lc-exp ::= Identifier
       ::= ‘proc’ Identifier ‘=>’ Lc-exp
       ::= Lc-exp ‘(’ Lc-exp ‘)’

(Quoted strings are literals.)

Some kind of internal representation, an *abstract syntax*, could be
used to unify all of these concrete variants.  (But is “abstract” the
best term for this kind of thing?  Is “syntax”?  Something about the
distinction between “abstract syntax” and “concrete syntax” seems
wrong.)

The abstract syntax will take the form of a tree (graph).  Nodes
are labelled with constructors and edges are labelled with
extractors. (see p. 52)

A new notation specifies both a concrete and abstract syntax for
a type:

Lc-exp ::= Identifier
           [var-exp (var)]

       ::= ‘(lambda (’ Identifier ‘)’ Lc-exp ‘)’
           [lambda-exp (bound-var body)]

       ::= ‘(’ Lc-exp Lc-exp ‘)’
           [app-exp (rator rand)]

The abstract syntax is given by the [bracketed] expressions.

To derive an abstract syntax expression from concrete syntax, we
need a parser.  Conversely, an unparser translates abstract syntax
into some concrete syntax.
