# Exercise 6.34

Translating to A-normal form.  I need to redefine the target
language, since the simple-exp/tail-form-exp distinction seems
too strong: the target language should have operand-position
procedure calls, though only as let-bound values.  OTOH, the
requirement for simple expressions in "ANF-OUT" is stronger
than in CPS-OUT: they have *no* subexpressions.

Here's a sketch of the grammar of ANF-OUT:

Simple-exp ::= (const-exp (num : Number))

           ::= (var-exp (var : Identifier))

Anf-exp    ::= (simple-exp->exp (simple : Simple-exp))

           ::= (anf-diff-exp (s1, s2 : Simple-exp))

           ::= (anf-zero?-exp (s1 : Simple-exp))

           ::= (anf-proc-exp (vars : List-of(Identifier)
                              body : Anf-exp))

           ::= (anf-let-exp (var : Identifier
                             rhs : Anf-exp    % ???
                             body: Anf-exp))

           ::= (anf-letrec-exp
                 (p-names  : List-of(Identifier)
                  b-varss  : List-of(List-of(Identifier))
                  p-bodies : List-of(Anf-exp)
                  lr-body  : Anf-exp))

           ::= (anf-if-exp (s1, s2, s3 : Simple-exp))

           ::= (anf-call-exp (rator : Simple-exp
                              rands : List-of(Simple-exp)))

Should the values that can be bound by a let be further
restricted to avoid nested lets?  Probably.  It's easy
enough to add another non-terminal to the grammar which
includes only let-exp.  Should letrec be restricted in some
way, too?  More to think about.

Anyway, the translation.

Constant and variable expressions require no translation:

(anf-of-exp (const-exp n)) = (const-exp n)

(anf-of-exp (var-exp v)) = (var-exp v)

For the rest, I had to get some help from the Flanagan, et al 1991
paper on A-normal form.  The translation algorithm they give is
pretty simple.  It's tail-recursive, and accumulates a continuation
that emits all of the nested lets when the recursion bottoms-out.
This avoids a problem that I hit right away with a recursive
algorithm: translating nested expressions results in lets nested in
their binding position.

See src/anf-trans.scm for the implementation.
