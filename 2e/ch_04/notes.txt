# Chapter 4 (2nd edition)

## 4.4 Type inference

This section changes the CHECKED language so that all type
expressions are optional.  To make the syntax easier to handle,
omitted types are marked by the ? placeholder.  Some or all of
the ?s may be filled in with types.

The following productions are added to the grammar:

Optional-type-exp ::= Type-exp
                      [a-type-exp (texp)]
                  ::= ?
                      [no-type-exp ()]

Proc and letrec exps now use Optional-type-exps:

Expression ::= proc ({Optional-type-exp Identifier}*(,)) Expression
               [proc-exp (opt-arg-texps ids body)]

           ::= letrec {Optional-type-exp Identifier
                         ({Optional-type-exp Identifier}*(,)) =
                          Expression}*
               in Expression
               [letrec-exp (opt-res-texps proc-names opt-arg-texps
                            idss bodies letrec-body)]

The optional type expressions will be represented by a new type,
that of *type variables*.  A type variable denotes a currently-unknown
type, and will be represented by a uniquely-tagged box (length-1
vector).  A type variable is initially empty (the box contains some
"bottom" element, (), in this case) and gets filled in by the type
checker.  Once a type variable is full, its contents are never changed.

There are a lot of loose threads with this type inference algorithm.
Although the book asserts that "every expression in our language can
be given automatically assigned a type", some need help to get a valid
inference, and it's not really clear what characterizes these problem
expressions.  For instance, in the extended language with pairs (which
are very simple and don't add any surprises to the inference algorithm),
this doesn't type-check:

((proc (p : ?) unpack a b = p
               in if zero?(a) b a)
 (pair 2 3))

But it does when you fill in (pair-of ? ?) for the type of the parameter.
You can get an idea of why this is necessary from looking at the algorithm,
but it would be nice to have a better understanding of what kinds of
expressions can really be typed.  Throwing more calls to the unifier into
the algorithm causes more expressions to work--at least, sometimes.  This
is all kind of fishy.
