# Chapter 4 (2nd edition)

## 4.4 Type inference

This section changes the CHECKED language so that all type
expressions are optional.  To make the syntax easier to handle,
omitted types are marked by the ? placeholder.  Some or all of
the ?s may be filled in with types.

The following productions are added to the grammar:

Optional-type-exp ::= Type-exp
                      [a-type-exp (texp)]
                  ::= ?
                      [no-type-exp ()]

Proc and letrec exps now use Optional-type-exps:

Expression ::= proc ({Optional-type-exp Identifier}*(,)) Expression
               [proc-exp (opt-arg-texps ids body)]

           ::= letrec {Optional-type-exp Identifier
                         ({Optional-type-exp Identifier}*(,)) =
                          Expression}*
               in Expression
               [letrec-exp (opt-res-texps proc-names opt-arg-texps
                            idss bodies letrec-body)]

The optional type expressions will be represented by a new type,
that of *type variables*.  A type variable denotes a currently-unknown
type, and will be represented by a uniquely-tagged box (length-1
vector).  A type variable is initially empty (the box contains some
"bottom" element, (), in this case) and gets filled in by the type
checker.  Once a type variable is full, its contents are never changed.
