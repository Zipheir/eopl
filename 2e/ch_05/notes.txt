# Chapter 5 (2nd ed.)

A collection of mutable data often has to be managed, so that the
whole state is updated together according to a known protocol.  In
this chapter, each piece of state will be represented by an Object
with *fields* and associated *methods*.  Calling a method will be
viewed in terms of sending a *message* to an object.

To allow methods to be reused, Objects will be an instance of some
*class*.  A class will specify the fields and methods of its
instances.  Classes can be *extended* by a new class, which inherits
all of the fields and methods of the original class.

This is a reasonable way to model our understanding of real-world
objects.

A closure can be thought of as a simple kind of Object; its state
is its set of free variables, and it has a single behavior,
application.

The four central elements of an object-orientated language:

* Objects encapsulate behavior (methods) and state (fields).

* Classes group objects that differ only in their state.

* Inheritance allows new classes to be derived from existing ones.

* (Object) polymorphism allows messages to be sent to objects
  of different classes.

A simple example:

class c1 extends object
  field i
  field j
  method initialize (x)
    begin
      i := x;
      j := -(0, x);
    end
  method countup (d)
    begin
      i := +(i, d);
      j := -(j, d)
    end
  method getstate () list(i, j)
let t1 = 0
    t2 = 0
    o1 = new cl(3)
in begin
     t1 := send o1 getstate();
     send o1 countup(2);
     t2 := send o1 getstate();
     list(t1, t2)
   end

Here, every instance of the class c1 will contain the fields
i and j, as well as the methods initialize, countup, and getstate.

## 5.2 Inheritance

If a class c2 extends class c1, then we say that c1 is the *parent*
of c1, or that c2 is the *child* of c1.  The parent class must be
defined before the child class that extends it.  All of the fields
and method of c1 will be in scope for the methods of c2, unless they
are *redeclared* in c2.  An instance of c2 (or any of its descendents,
see below) can appear anywhere an instance of c1 can.

The foundational class of this chapter's language will be 'object',
which has no methods or fields.  In particular, 'object' has no
'initialize' method, so instances of it can't be created.  Each
class other than 'object' has exactly one parent and any number of
children.  Every class thus has a set of ancestors forming a chain
back to 'object', and a (possibly empty) set of descendents.

This is a *single-inheritance* language, since every class has
at most one parent.

If a child class redeclares a field of one of its ancestors, then
the new definition is kept separate from the old one, but shadowing
occurs in the methods of the child class.

[Does the 'initialize' method of a child class invoke those of
its ancestors, as well?  The authors state that an initialization
method duplicating features of the methods it overrides "would
clearly be bad practice", but they seem to expect you to know why...

I think the intent is that, if you want to "extend" the initialization
method of the parent class, you'd use a "super call" rather than
attempting (and probably failing) to do what the parent's 'initialize'
would do.]

A method m redeclared by a child class *overrides* the parent's method
of the same name: whenever the message m is sent to an instance of
the child class, the child's new version of m is invoked.

A slightly tricky example:

class c1 extends object
  method initialize () 1
  method m1 () 1
  method m2 () send self m1()
class c2 extend c1
  method m1 () 2
let o1 = new c1()
    o2 = new c2()
in list(send o1 m1(),
        send o2 m1(),
        send o2 m2())

What is the result of 'send o2 m2()' in this example?  The m2 method
invokes the m1 method of either the c1 or c2 class.  Both
interpretations are possible!  c1's m1 is the one that was in scope
for the definition of m2, so this might be the method intended; this
is called *static* method dispatch, and under this the call would
return 1.  But the m2() message was sent to o2, so 'self' is an
instance of c2, and, on this view, the call should return 2.  This
is *dynamic* method dispatch, in which the method to be invoked
depends on the object which received the corresponding message.

This is very much like the distinction between lexical and dynamic
binding, but here I think it's less clear which is better.  As you
might guess, which method will be invoked for a given call is static
information under static dispatch, but runtime support is needed for
dynamic dispatch.

This chapter's language uses dynamic dispatch, but "there is one
occasion in which a form of static method dispatch is required."
(p. 177)

Especially when initializing a new instance of a class, we want to
invoke methods of that class's parent class.  For this, we need the
idea of a method's *host class*, which is the class in which the
method was declared.  When the super call 'super s(a1, ..., an)' is
executed in the body of a method m, it invokes the method s of m's
host class's parent on the arguments a1, ..., an.  Because the parent
of m's host class is known statically, the referent of such a super
call never changes.

Another subtle example:

class c1 extends object
  method initialize () 1
  method m1 () send self m2 ()
  method m2 () 13
class c2 extends c1
  method m1 () 22
  method m2 () 23
  method m3 () super m1()
class c3 extends c2
  method m1 () 32
  method m2 () 33
let o3 = new c3()
in send o3 m3()

This returns 33.  If 'super' worked differently and dispatched to
the parent of the class 'self' is an instance of, then this would
return 22 instead.  (It's not quite right to say "if super m1()
were dynamically dispatched", as the book does, because of the way
'super' is defined (above).)
