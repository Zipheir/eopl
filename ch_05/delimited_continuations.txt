# Adding Delimited Continuations

Instead of (or in addition to) the undelimited continuations that we
get from letcc, I can implement delimited continuations for the CPS
LETREC interpreter.  This is surprisingly easy.  I'll document how
to implement the shift/reset delimited continuation primitives; I may
implement continuation prompts later.

Here's the syntax::

Expression ::= reset Expression
               [reset-exp (body)]

           ::= shift Identifier in Expression
               [shift-exp (var body)]

A 'reset' form delimits a continuation; 'shift' *k* *exp* takes
the continuation back to the most recent delimiter, binds it to *k*,
then evaluates *exp* with the continuation given by the reset.

Of course, this means I'll have to add a type of continuation values;
I'll also use the 'throw' form of Ex. 5.40 to apply continuations.

Here are the value-of/k clauses:

;; (define (value-of/k exp env cont)
;;   (pmatch exp ...
;;
((reset-exp ,body) (value-of/k body env (reset-cont cont)))

((shift-exp ,var ,body)
 (let ((dc (get-reset cont)))
   (value-of/k body (extend-env var (cont-val dc) env) dc)))

The get-reset procedure digs through a continuation to the last reset
point and returns its continuation:

;; get-reset : Cont -> Cont
(define (get-reset cont)
  (pmatch cont
    ((end-cont) (error 'get-reset "no reset found" cont))
    ((reset-cont ,k) k)
    ((zero1-cont ,k) (get-reset k))
    ;; ... all other cases are just like the zero1-cont one.
    ))

With this, throw, and parser support, I can write expressions like

reset -(10, shift _ in 4)                     => 4
reset -(10, shift k in (throw k (throw k 3))) => 3
