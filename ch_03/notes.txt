# Chapter 3: Expressions

Binding and scope of variables, illustrated through a number of
little languages with environments.

In each case, this means writing an interpreter, or possibly a
compiler and interpreter (for the target language).

Regardless, a *front end* will be used to translate a program
into a value (an “abstract syntax tree”) behaving as an internal
representation.

This involves scanning and parsing.  An alternative when working
in Lisp is to write a language in S-expression form and just use
‘read’ to do all of that.

## 3.2 LET: A simple language

The grammar for LET (figure 3.2):

Program ::= Expression
            [a-program (exp1)]

Expression ::= Number
               [const-exp (num)]

           ::= - (Expression , Expression)
               [diff-exp (exp1 exp2)]

           ::= zero? Expression
               [zero?-exp (exp1)]

           ::= if Expression then Expression else Expression
               [if-exp (exp1 exp2 exp3)]

           ::= Identifier
               [var-exp (var)]

           ::= let Identifier = Expression in Expression
               [let-exp (var exp1 body)]

### 3.2.2

Each language manipulates at least two sets of values: expressed
values and denoted values.  Here, the former are “the possible
values of expressions”, and the latter are “the values bound to
variables”. (p. 61)

This is interesting, although the use of the term “denoted” seems a
bit confusing.  Clearly there are languages in which “locations in
a store” are denoted values, and even possibly expressed values (as
in C).

In LET and other languages of this chapter, the two sets of values
are the same:

Exp-Val = Int + Bool
Den-Val = Int + Bool

These are types with the obvious constructors, num-val and bool-val,
and extractors, expval->num and expval->bool (undefined when given
the wrong disjunct).

### 3.2.2 Environments

Once again, environments are functions from a finite set of names
to Den-Val, the set of denoted values.  The following language
is used for talking about environments:

• ρ ranges over environments.

• [] denotes the empty environment.

• [var = val]ρ denotes (extend-env var val ρ).

• [var₁ = val₁, var₂ = val₂]ρ ≡ [var₁ = val₁]([var₂ = val₂]ρ), etc.

• [var₁ = val₁, var₂ = val₂, …] denotes the environment in which
  var₁ is bound to val₁, and so on.

### 3.2.4 Specifying the behavior of expressions

The core procedure for making sense of the LET language is the
observer value-of : Exp × Env → Exp-Val, which is, of course,
the interpreter.

The (incomplete) specification of value-of (p. 62):

> (value-of (const-exp n) ρ) = (num-val n)
>
> (value-of (var-exp var) ρ) = (apply-env ρ var)
>
> (value-of (diff-exp exp₁ exp₂) ρ) =
>   (num-val (- (expval->num (value-of exp₁ ρ))
>               (expval->num (value-of exp₂ ρ))))

Note that, to evaluate a diff-exp, the operands are evaluated,
the numeric values extracted and subtracted, then the difference
is expressed as a num-val (i.e. “brought back into” the Exp-Val
type).

Shorthands:

⌈n⌉   ≡ (num-val n)
⌊val⌋ ≡ (expval->num val)

(And similarly for bool-val and expval->bool.)  In addition,
«exp» denotes the tree-type internal representation for exp.
The the above spec. for value-of can be rewritten more concisely:

(value-of «n» ρ) = ⌈n⌉

(value-of «var» ρ) = (apply-env ρ var)

(value-of «-(exp₁, exp₂)») =
  ⌈(- ⌊(value-of «exp₁» ρ)⌋ ⌊(value-of «exp₂» ρ)⌋)⌉


In the LET language, a program is an expression, so finding the
value of a program is just a matter of evaluating it in some
initial environment.

### 3.2.6 Specifying conditionals

This section adds the interface for booleans in LET.

Equationally (which is more concise than the inference rule
versio), the specifications are:

;; zero?-exp
(value-of (zero?-exp exp₁) ρ) =
  (if (zero? ⌊(value-of exp₁ ρ)⌋)
      ⌈#t⌉
      ⌈#f⌉)

;; if-exp
(value-of (if-exp exp₁ exp₂ exp₃) ρ) =
  (if (expval->bool (value-of exp₁ ρ))
      (value-of exp₂ ρ)
      (value-of exp₃ ρ))

### 3.2.7 Specifying let

Now the interesting part.  An example of the let syntax:

let x = 5 in -(x, 3)

Lets can be nested, and bindings can be shadowed:

let z = 5
in let x = 3
   in let y = -(x, 1)
      in let x = 4
         in -(z, -(x, y))  % here x = 4

The equational specification:

(value-of (let-exp var exp₁ body) ρ)
  = (value-of body [var = (value-of exp₁ ρ)]ρ)

## 3.3 PROC: A language with procedures

In PROC, procedures are expressed and denoted values:

Exp-val = Int + Bool + Proc
Den-val = Int + Bool + Proc

Syntax for creating and applying procedures:

Expression ::= proc (Identifier) Expression
               [proc-exp (var body)]
           ::= (Expression Expression)
               [call-exp (rator rand)]

What information must the Proc type include?  This is a language
with lexical scope, so constructing a procedure means saving its
environment.  The spec. for a proc expression:

(value-of (proc-exp var body) ρ) = (proc-val (procedure var body ρ))

proc-val will be the constructor for expressed procedure values.

Partial semantics for procedure calls:

(value-of (call-exp rator rand) ρ) =
  (let ((proc (expval->proc (value-of rator ρ)))
        (arg (value-of rand ρ)))
    (apply-procedure proc arg))

Applying a procedure must evaluate the procedure body in an
extended environment, in which the formal parameter is bound to
the argument of the call.  All other names in the procedure body
must have the same bindings that they did at the time when the
procedure was created.  This is expressed by the condition:

(apply-procedure (procedure var body ρ) val)
  = (value-of body [var=val]ρ)

(Based on the example calculation on p. 77, it seems that PROC
extends LET, i.e. the semantics for most things are the same as
in that language.)

### 3.3.2 Representation

The first approach in this section “proceduralizes
procedures” (see §2.2.3).  This is very straightforward:
procedures in PROC are represented by Scheme procedures.
Here’s the ‘procedure’ constructor; everything else is obvious
from it:

;; procedure : Var × Exp × Env → Proc
(define (procedure var body env)
  (lambda (val)
    (value-of body (extend-env var val env))))

A more explicit representation using a new type:

(define-datatype proc proc?
  (procedure
    (var identifier?)
    (body expression?)
    (saved-env environment?)))

;; apply-procedure : Proc × Exp-val → Exp-val
(define (apply-procedure proc1 val)
  (cases proc proc1
    (procedure (var body saved-env)
      (value-of body (extend-env var val saved-env)))))

This kind of structure would traditionally be called a *closure*.
[Not my favorite terminology.]

## 3.4 LETREC

This language allows recursive definitions, e.g.

letrec double(x) = if zero?(x)
                      then 0
                      else -((double -(x, 1)), -2)
in (double 6)

Note that the syntax of the letrec form is specialized to
allow only unary procedure bindings.  The syntax:

Expression ::=  letrec Identifier (Identifier) =
                  Expression in Expression
                [letrec-exp (p-name b-var p-body letrec-body)]

The specification of letrec's desired behavior:

(value-of (letrec-exp proc-name bound-var proc-body letrec-body) ρ)
  = (value-of letrec-body
              (extend-env-rec proc-name bound-var proc-body ρ))

This of course just kicks the can to extend-env-rec.  Instead of
specifying this directly, the environment it produces is described
through apply-env.  If

ρ₁ := (extend-env-rec proc-name bound-var proc-body ρ),

then

(apply-env ρ₁ proc-name) =
  (proc-val (procedure bound-var proc-body ρ₁))

and, for var ≠ proc-name,

(apply-env ρ₁ var) = (apply-env ρ var)

In other words, the environment ρ₁ returned by
(extend-env-rec proc-name … ρ) binds proc-name to a procedure value
whose saved environment is itself ρ₁.  (This is the magic part.)
Otherwise, it contains the same bindings as ρ.

A new type of environments is defined (p. 86):

(define-datatype environment environment?
  (empty-env)
  (extend-env
    (var identifier?)
    (val expval?)
    (env environment?))
  (extend-env-rec
    (p-name identifier?)
    (b-var identifier?)
    (body expression?)
    (env environment?)))

(define (apply-env env search-var)
  (cases environment env
    (empty-env ()
      (report-no-binding-found search-var))
    (extend-env (saved-var saved-val saved-env)
      (if (eqv? saved-var search-var)
          saved-val
          (apply-env saved-env search-var)))
    (extend-env-rec (p-name b-var p-body saved-env)
      (if (eqv? search-var p-name)
          (proc-val (procedure b-var p-body env))
          (apply-env saved-env search-var)))))

This is really clever.  By constructing the procedure value "on
demand", this implementation avoids the circularity of reference
that seemed to be inherent in the spec. of extend-env-rec.  (And
there's no "lets-and-sets!" hack, either.)

The downside is that a new procedure value must be constructed each
time the environment is applied.

## 3.5 Scoping and binding

Most programming languages allow variables to appear as either
*references* or *declarations*.  e.g. all the variables of (f x y)
in Scheme appear as references, while the x in (lambda (x) ...) is
a declaration introducing x as a name for some value.

A variable reference is *bound by* an associated declaration; it is
*bound to* its value.

Declarations usually have a limited scope.  Each language has
*scoping rules* for deciding which declaration a variable reference
refers to.  A declaration's *scope* is the portion of a program
over which it is valid.

The reference-declaration relation over a program can be determined
without executing it.  It is thus a *static* property of the program.

Under the familiar *lexical scoping* rules, we search *outward* from
a variable reference until we find a declaration of the variable.

Re-declaring a lexical variable "create[s] a hole in a scope" by
shadowing its outer declaration.

Each lexical scope is nested within a containing scope.

"The *extent* of a binding is the time interval during which the
binding is maintained."  In the languages explored so far, bindings
have *semi-infinite* extent; the must be maintained, in principle,
forever, since they may be e.g. part of the saved environment of a
procedure.  In practical implementations, unreachable bindings are
garbage collected.  Whether a binding is reachable can only be
determined at runtime.  The "reachable set" or its complement can't
be statically characterized.

So-called *dynamic extent*, though, *is* a static property.

This seems contradictory.  Is extent a static property in some
languages (e.g. LET) but dynamic in others, in particular those with
semi-infinite extent?  Or is "dynamic extent" a special, static(!)
flavor of extent?

I think the first meaning is intended.

## 3.6 Eliminating variable names

When following the lexical scoping rules outward from a variable
reference, a number of contours (block boundaries) may be crossed
before the associated declaration is found.  The number of contours
crossed is called the *lexical* (or *static*) *depth* of the
reference.  e.g.

(lambda (x)
  ((lambda (a)
     (x a))     ; ref. to x has lexical depth 1
   x))          ; ref. to x has lexical depth 0

At least with single-binding lambdas, each variable reference could
be replaced by its lexical depth, i.e. de Bruijn index:

(nameless-lambda
  ((nameless-lambda
     (#1 #0))
   #0))

Among other things, this means that an environment can be represented
by a sequence of values.  The the index #n simply refers to the nth
element of the environment-sequence.

## 3.7 Implementing lexical addressing

This section implements the program transformation that (a) removes
variables from declarations, and (b) replaces each variable reference
with its lexical depth.  This involves writing a translator and an
interpreter for the new "nameless" language.

For the translator, the source and target languages must be specified.
[The source language seems to be PROC, although the text doesn't
explicitly state this.]  The constructs specific to the target
language:

Expression ::= %lexref Number
               [nameless-var-exp (num)]

           ::= %let Expression in Expression
               [nameless-let-exp (exp1 body)]

           ::= %lexproc Expression
               [nameless-proc-exp (body)]

These correspond to var-exps, let-exps, and proc-exps, respectively.

The translator will reject any program containing one of these
constructs.  Likewise, the interpreter for the target language will
reject a program containing a "nameful" construct.

Calculating the lexical address of a reference requires context,
namely the scopes enclosing the reference.  Thus, 'translation-of'
(the translator procedure) will take as arguments an expresssion
and a *static environment*, which is a list of variables representing
the scopes of the current expression.  To calculate the lexical
address of a variable, we find its position (well, the position of
its first occurrence) in this list.

The semantics, with brackets abbreviating (translation-of ...):

⟦(var-exp (var)) senv⟧ = (nameless-var-exp (apply-senv senv var))

⟦(let-exp (var exp1 body)) senv⟧ =
  (nameless-let-exp ⟦exp1 senv⟧ ⟦body (extend-senv var senv)⟧)

⟦(proc-exp (var body)) senv⟧ =
  (nameless-proc-exp ⟦body (extend-senv var senv)⟧)

⟦(const-exp (num)) senv⟧ = (const-exp num)

⟦(diff-exp (exp1 exp2)) senv⟧ = (diff-exp ⟦exp1 senv⟧ ⟦exp2 senv⟧)

⟦(zero?-exp (exp1)) senv⟧ = (zero?-exp ⟦exp1 senv⟧)

⟦(if-exp (exp1 exp2 exp3)) senv⟧ =
  (if-exp ⟦exp1 senv⟧ ⟦exp2 senv⟧ ⟦exp3 senv⟧)

⟦(call-exp (rator rand)) senv⟧ = (call-exp ⟦rator senv⟧ ⟦rand senv⟧)


## 3.7.2 The Nameless interpreter

The interpreter uses the lexical addresses produced by the compiler
above to avoid "explicitly" searching for variables at runtime.

There are no variables in Nameless programs, so environments are
simple:

empty-nameless-env : () → Nameless-env

extend-nameless-env : Exp-val × Nameless-env → Nameless-env

apply-nameless-env : Nameless-env × Lex-addr → Den-val

The nameless spec. for procedures:

(apply-procedure (procedure body ρ) val) =
  (value-of body (extend-nameless-env val ρ))

This is the same as it was for PROC, without the bound variable.

Most of the interpreter function value-of is the same as the one
for PROC.  Here's where the spec differs:

(value-of (nameless-var-exp n) env) = (apply-nameless-env env n)

(value-of (nameless-let-exp exp1 body) env) =
  (let ((val (value-of exp1 env)))
    (value-of body (extend-nameless-env val env)))

(value-of (nameless-proc-exp body) env) =
  (proc-val (procedure body env))

See src/nameless.scm for an implementation.
